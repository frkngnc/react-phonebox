"use strict";(self.webpackChunkreact_phonebox_docs=self.webpackChunkreact_phonebox_docs||[]).push([[829],{1439:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"hooks-overview","title":"Hooks Overview","description":"This section provides detailed information about the custom React hooks provided by react-phonebox.","source":"@site/docs/hooks-overview.md","sourceDirName":".","slug":"/hooks-overview","permalink":"/react-phonebox/docs/hooks-overview","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/hooks-overview.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Form Integration","permalink":"/react-phonebox/docs/usage/form-integration"},"next":{"title":"Styling","permalink":"/react-phonebox/docs/styling"}}');var o=r(4848),t=r(8453);const i={},l="Hooks Overview",c={},a=[{value:"\ud83e\udde9 useFormatter",id:"-useformatter",level:2},{value:"Returns:",id:"returns",level:3},{value:"\ud83d\udd22 useExampleNumber",id:"-useexamplenumber",level:2},{value:"Returns:",id:"returns-1",level:3},{value:"\ud83d\udcf1 useMobileOnly",id:"-usemobileonly",level:2},{value:"Returns:",id:"returns-2",level:3},{value:"\ud83c\udf0d useCountries",id:"-usecountries",level:2},{value:"Returns:",id:"returns-3",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"hooks-overview",children:"Hooks Overview"})}),"\n",(0,o.jsxs)(n.p,{children:["This section provides detailed information about the custom React hooks provided by ",(0,o.jsx)(n.strong,{children:"react-phonebox"}),".\nThese hooks allow for full control over formatting, validation, placeholder generation, and country selection."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-useformatter",children:"\ud83e\udde9 useFormatter"}),"\n",(0,o.jsx)(n.p,{children:"Formats a given phone number string according to the selected country."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useFormatter } from 'react-phonebox';\n\nconst { format } = useFormatter('TR');\nconst formatted = format('5012345678');\n"})}),"\n",(0,o.jsx)(n.h3,{id:"returns",children:"Returns:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"format(input: string): string"})," \u2013 Formats input digits using libphonenumber-js ",(0,o.jsx)(n.code,{children:"AsYouType"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-useexamplenumber",children:"\ud83d\udd22 useExampleNumber"}),"\n",(0,o.jsx)(n.p,{children:"Generates an example number and placeholder for the selected country."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useExampleNumber } from 'react-phonebox';\n\nconst { placeholder, example, maxDigits } = useExampleNumber('US');\n"})}),"\n",(0,o.jsx)(n.h3,{id:"returns-1",children:"Returns:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"placeholder"})," \u2013 Example-based national format string (e.g. ",(0,o.jsx)(n.code,{children:"201-555-0123"}),")"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"example"})," \u2013 Example number object with formatting methods"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"maxDigits"})," \u2013 Max allowed digit count for national number"]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-usemobileonly",children:"\ud83d\udcf1 useMobileOnly"}),"\n",(0,o.jsxs)(n.p,{children:["Validates a phone number and ensures it's a mobile number if ",(0,o.jsx)(n.code,{children:"mobileOnly = true"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useMobileOnly } from 'react-phonebox';\n\nconst { validate } = useMobileOnly();\nconst result = validate('+905012345678', true);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"returns-2",children:"Returns:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"validate(raw: string, mobileOnly: boolean)"})," \u2192 ",(0,o.jsx)(n.code,{children:"{ isValid: boolean; parsed?: string }"})]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-usecountries",children:"\ud83c\udf0d useCountries"}),"\n",(0,o.jsx)(n.p,{children:"Loads all countries with localized names and dial codes."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useCountries } from 'react-phonebox';\n\nconst { countries, selectedCountry, setSelectedCountry } = useCountries('tr', 'TR');\n"})}),"\n",(0,o.jsx)(n.h3,{id:"returns-3",children:"Returns:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"countries"}),": Array of ",(0,o.jsx)(n.code,{children:"{ name, iso2, dialCode }"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"selectedCountry"}),": Currently selected country"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"setSelectedCountry(country)"}),": Manually update selection"]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var s=r(6540);const o={},t=s.createContext(o);function i(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);